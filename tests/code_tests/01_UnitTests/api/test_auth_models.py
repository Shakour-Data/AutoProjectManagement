"""
Comprehensive unit tests for autoprojectmanagement/api/auth_models.py
Generated by AutoProjectManagement testing framework
"""

import pytest
import sys
import os
from pathlib import Path
from datetime import datetime

# Add source to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent.parent / "src"))

from autoprojectmanagement.api.auth_models import (
    UserRegisterRequest,
    UserLoginRequest,
    UserProfileResponse,
    AuthTokenResponse,
    LoginSuccessResponse,
    LoginErrorResponse,
    RegisterSuccessResponse,
    RegisterErrorResponse,
    PasswordResetRequest,
    PasswordResetConfirmRequest,
    EmailVerifyRequest,
    TokenRefreshRequest,
    TokenRefreshResponse,
    LogoutRequest,
    LogoutResponse,
    UserUpdateRequest,
    PasswordChangeRequest,
    AuthConfigResponse,
    ErrorResponse,
    SuccessResponse,
    ValidationErrorDetail,
    ValidationErrorResponse,
    ErrorCodes,
    SuccessMessages,
    AuthExamples
)

class TestUserRegisterRequest:
    """Test class for UserRegisterRequest model validation"""

    def test_valid_registration(self):
        """Test valid user registration data."""
        data = {
            "email": "user@example.com",
            "password": "SecurePass123!",
            "first_name": "John",
            "last_name": "Doe"
        }
        request = UserRegisterRequest(**data)
        assert request.email == "user@example.com"
        assert request.first_name == "John"
        assert request.last_name == "Doe"

    def test_invalid_email(self):
        """Test invalid email format raises validation error."""
        data = {
            "email": "invalid-email",
            "password": "SecurePass123!",
            "first_name": "John",
            "last_name": "Doe"
        }
        with pytest.raises(Exception):  # Pydantic raises ValidationError
            UserRegisterRequest(**data)

    def test_weak_password(self):
        """Test weak password raises validation error."""
        data = {
            "email": "user@example.com",
            "password": "weak",
            "first_name": "John",
            "last_name": "Doe"
        }
        with pytest.raises(Exception):  # Pydantic raises ValidationError
            UserRegisterRequest(**data)

    def test_email_case_insensitivity(self):
        """Test email case insensitivity."""
        data = {
            "email": "USER@EXAMPLE.COM",
            "password": "SecurePass123!",
            "first_name": "John",
            "last_name": "Doe"
        }
        request = UserRegisterRequest(**data)
        assert request.email == "user@example.com"

    def test_international_names(self):
        """Test international character names."""
        data = {
            "email": "user@example.com",
            "password": "SecurePass123!",
            "first_name": "José",
            "last_name": "Müller"
        }
        request = UserRegisterRequest(**data)
        assert request.first_name == "José"
        assert request.last_name == "Müller"

class TestUserLoginRequest:
    """Test class for UserLoginRequest model validation"""

    def test_valid_login(self):
        """Test valid user login data."""
        data = {
            "email": "user@example.com",
            "password": "SecurePass123!"
        }
        request = UserLoginRequest(**data)
        assert request.email == "user@example.com"

    def test_invalid_login_email(self):
        """Test invalid email format raises validation error."""
        data = {
            "email": "invalid-email",
            "password": "SecurePass123!"
        }
        with pytest.raises(Exception):  # Pydantic raises ValidationError
            UserLoginRequest(**data)

    def test_email_normalization(self):
        """Test email normalization."""
        data = {
            "email": "USER@EXAMPLE.COM",
            "password": "SecurePass123!"
        }
        request = UserLoginRequest(**data)
        # Pydantic's EmailStr automatically normalizes to lowercase
        assert request.email == "user@example.com"

class TestUserProfileResponse:
    """Test class for UserProfileResponse functionality"""

    def test_user_profile_creation(self):
        """Test UserProfileResponse creation with valid data."""
        now = datetime.now()
        data = {
            "user_id": "550e8400-e29b-41d4-a716-446655440000",
            "email": "user@example.com",
            "first_name": "John",
            "last_name": "Doe",
            "is_verified": True,
            "is_active": True,
            "created_at": now,
            "last_login": now
        }
        response = UserProfileResponse(**data)
        assert response.user_id == "550e8400-e29b-41d4-a716-446655440000"
        assert response.email == "user@example.com"
        assert response.first_name == "John"
        assert response.last_name == "Doe"

class TestAuthTokenResponse:
    """Test class for AuthTokenResponse functionality"""

    def test_auth_token_creation(self):
        """Test AuthTokenResponse creation with valid data."""
        user_profile_data = {
            "user_id": "550e8400-e29b-41d4-a716-446655440000",
            "email": "user@example.com",
            "first_name": "John",
            "last_name": "Doe",
            "is_verified": True,
            "is_active": True,
            "created_at": datetime.now(),
            "last_login": datetime.now()
        }
        user_profile = UserProfileResponse(**user_profile_data)
        
        data = {
            "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "token_type": "bearer",
            "expires_in": 3600,
            "user": user_profile
        }
        
        response = AuthTokenResponse(**data)
        assert response.access_token == "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        assert response.token_type == "bearer"

class TestLoginSuccessResponse:
    """Test class for LoginSuccessResponse functionality"""

    def test_login_success_creation(self):
        """Test LoginSuccessResponse creation with valid data."""
        user_profile_data = {
            "user_id": "550e8400-e29b-41d4-a716-446655440000",
            "email": "user@example.com",
            "first_name": "John",
            "last_name": "Doe",
            "is_verified": True,
            "is_active": True,
            "created_at": datetime.now(),
            "last_login": datetime.now()
        }
        user_profile = UserProfileResponse(**user_profile_data)
        
        auth_token_data = {
            "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "token_type": "bearer",
            "expires_in": 3600,
            "user": user_profile
        }
        auth_token = AuthTokenResponse(**auth_token_data)
        
        data = {
            "success": True,
            "message": "Login successful",
            "data": auth_token
        }
        
        response = LoginSuccessResponse(**data)
        assert response.success == True
        assert response.message == "Login successful"

class TestRegisterSuccessResponse:
    """Test class for RegisterSuccessResponse functionality"""

    def test_register_success_creation(self):
        """Test RegisterSuccessResponse creation with valid data."""
        data = {
            "success": True,
            "message": "User registered successfully",
            "user_id": "550e8400-e29b-41d4-a716-446655440000",
            "email": "user@example.com"
        }
        
        response = RegisterSuccessResponse(**data)
        assert response.success == True
        assert response.message == "User registered successfully"

class TestErrorCodes:
    """Test class for ErrorCodes integration"""

    def test_error_codes_availability(self):
        """Test that all error codes are available."""
        assert ErrorCodes.USER_ALREADY_EXISTS == "auth_user_exists"
        assert ErrorCodes.INVALID_CREDENTIALS == "auth_invalid_credentials"
        assert ErrorCodes.ACCOUNT_NOT_VERIFIED == "auth_account_not_verified"

class TestSuccessMessages:
    """Test class for SuccessMessages integration"""

    def test_success_messages_availability(self):
        """Test that all success messages are available."""
        assert SuccessMessages.REGISTER_SUCCESS == "User registered successfully. Please verify your email."
        assert SuccessMessages.LOGIN_SUCCESS == "Login successful"
        assert SuccessMessages.LOGOUT_SUCCESS == "Logout successful"

class TestAuthExamples:
    """Test class for AuthExamples integration"""

    def test_auth_examples_availability(self):
        """Test that all auth examples are available."""
        assert AuthExamples.REGISTER_REQUEST["email"] == "user@example.com"
        assert AuthExamples.LOGIN_REQUEST["email"] == "user@example.com"

class TestAuthModelsIntegration:
    """Test class for auth models integration tests"""

    def test_auth_models_work_together(self):
        """Test that auth models can work together in a complete flow."""
        # Registration request
        register_data = {
            "email": "user@example.com",
            "password": "SecurePass123!",
            "first_name": "John",
            "last_name": "Doe"
        }
        register_request = UserRegisterRequest(**register_data)
        
        # Simulate successful registration
        register_response = RegisterSuccessResponse(
            success=True,
            message=SuccessMessages.REGISTER_SUCCESS,
            user_id="550e8400-e29b-41d4-a716-446655440000",
            email=register_request.email
        )
        
        # Login request
        login_data = {
            "email": "user@example.com",
            "password": "SecurePass123!"
        }
        login_request = UserLoginRequest(**login_data)
        
        # Verify the flow works
        assert register_response.success == True
        assert register_request.email == login_request.email

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
