"""
Auto-generated tests for autoprojectmanagement\api\sse_endpoints.py
Generated by AutoProjectManagement testing framework
"""

import pytest
import asyncio
import json
from unittest.mock import Mock, patch, AsyncMock
import sys
from pathlib import Path

# Add source to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

from autoprojectmanagement.api import sse_endpoints
from autoprojectmanagement.api.realtime_service import EventService, EventType, Connection

class TestSSEConnection:
    """Test class for SSEConnection"""
    
    def setup_method(self):
        """Setup for each test method"""
        self.connection_id = "test-connection-123"
        self.sse_connection = sse_endpoints.SSEConnection(self.connection_id)
    
    def teardown_method(self):
        """Cleanup after each test method"""
        pass

    def test_sse_connection_initialization(self):
        """Test SSE connection initialization"""
        assert self.sse_connection.connection_id == self.connection_id
        assert self.sse_connection.message_queue is not None
        assert self.sse_connection.last_event_id is None
        assert self.sse_connection.connected_at > 0
        assert self.sse_connection.last_activity > 0

    @pytest.mark.asyncio
    async def test_sse_connection_send(self):
        """Test SSE connection send method"""
        test_message = {"type": "test_event", "data": "test_data"}
        
        await self.sse_connection.send(test_message)
        
        # Verify message was added to queue
        assert not self.sse_connection.message_queue.empty()
        queued_message = await self.sse_connection.message_queue.get()
        assert "event_id" in queued_message
        assert queued_message["type"] == "test_event"
        assert queued_message["data"] == "test_data"

    @pytest.mark.asyncio
    async def test_sse_connection_get_messages(self):
        """Test SSE connection get_messages generator"""
        test_message = {"type": "test_event", "data": "test_data"}
        
        # Add message to queue
        await self.sse_connection.send(test_message)
        
        # Get messages from generator
        messages = []
        async for message in self.sse_connection.get_messages():
            messages.append(message)
            break  # Just get one message for test
        
        assert len(messages) == 1
        assert "id:" in messages[0]
        assert "event: test_event" in messages[0]
        assert "data:" in messages[0]

class TestSSEConnectionManager:
    """Test class for SSEConnectionManager"""
    
    def setup_method(self):
        """Setup for each test method"""
        self.manager = sse_endpoints.SSEConnectionManager()
        self.mock_event_service = Mock()
        sse_endpoints.event_service = self.mock_event_service
    
    def teardown_method(self):
        """Cleanup after each test method"""
        sse_endpoints.event_service = EventService()

    @pytest.mark.asyncio
    async def test_create_connection(self):
        """Test creating SSE connection"""
        self.mock_event_service.generate_connection_id.return_value = "test-conn-456"
        self.mock_event_service.register_connection = AsyncMock()
        
        connection = await self.manager.create_connection()
        
        assert connection.connection_id == "test-conn-456"
        assert "test-conn-456" in self.manager.active_connections
        self.mock_event_service.register_connection.assert_called_once_with(connection)

    @pytest.mark.asyncio
    async def test_close_connection(self):
        """Test closing SSE connection"""
        connection_id = "test-conn-789"
        self.manager.active_connections[connection_id] = Mock()
        self.mock_event_service.unregister_connection = AsyncMock()
        
        await self.manager.close_connection(connection_id)
        
        assert connection_id not in self.manager.active_connections
        self.mock_event_service.unregister_connection.assert_called_once_with(connection_id)

    @pytest.mark.asyncio
    async def test_handle_subscription(self):
        """Test handling subscription requests"""
        connection_id = "test-conn-sub"
        connection = Mock()
        connection.subscriptions = {EventType.FILE_CHANGE}
        self.manager.active_connections[connection_id] = connection
        
        self.mock_event_service.unsubscribe = AsyncMock()
        self.mock_event_service.subscribe = AsyncMock()
        self.mock_event_service.set_project_filter = AsyncMock()
        
        result = await self.manager.handle_subscription(
            connection_id, ["file_change", "auto_commit"], "test-project"
        )
        
        assert result == ["file_change", "auto_commit"]
        self.mock_event_service.unsubscribe.assert_called_once_with(connection_id, EventType.FILE_CHANGE)
        self.mock_event_service.subscribe.assert_any_call(connection_id, EventType.FILE_CHANGE)
        self.mock_event_service.subscribe.assert_any_call(connection_id, EventType.AUTO_COMMIT)
        self.mock_event_service.set_project_filter.assert_called_once_with(connection_id, "test-project")

class TestSSEEndpoints:
    """Test class for SSE endpoints"""
    
    def setup_method(self):
        """Setup for each test method"""
        self.mock_request = Mock()
        self.mock_sse_manager = Mock()
        sse_endpoints.sse_manager = self.mock_sse_manager
    
    def teardown_method(self):
        """Cleanup after each test method"""
        sse_endpoints.sse_manager = sse_endpoints.SSEConnectionManager()

    @pytest.mark.asyncio
    async def test_sse_endpoint_basic(self):
        """Test basic SSE endpoint functionality"""
        mock_connection = Mock()
        mock_connection.connection_id = "test-conn-111"
        mock_connection.get_messages = AsyncMock(return_value=AsyncMock())
        
        self.mock_sse_manager.create_connection = AsyncMock(return_value=mock_connection)
        self.mock_sse_manager.handle_subscription = AsyncMock(return_value=["file_change"])
        self.mock_sse_manager.close_connection = AsyncMock()
        
        # Mock the heartbeat task
        with patch('autoprojectmanagement.api.sse_endpoints._send_heartbeats') as mock_heartbeat:
            mock_heartbeat.return_value = AsyncMock()
            
            response = await sse_endpoints.sse_endpoint(
                self.mock_request, "file_change", "test-project", None
            )
            
            assert response.media_type == "text/event-stream"
            self.mock_sse_manager.create_connection.assert_called_once()
            self.mock_sse_manager.handle_subscription.assert_called_once()

    @pytest.mark.asyncio
    async def test_sse_endpoint_with_last_event_id(self):
        """Test SSE endpoint with last event ID for reconnection"""
        mock_connection = Mock()
        mock_connection.connection_id = "test-conn-222"
        mock_connection.get_messages = AsyncMock(return_value=AsyncMock())
        
        self.mock_sse_manager.create_connection = AsyncMock(return_value=mock_connection)
        self.mock_sse_manager.handle_subscription = AsyncMock(return_value=["file_change"])
        self.mock_sse_manager.close_connection = AsyncMock()
        
        with patch('autoprojectmanagement.api.sse_endpoints._send_heartbeats') as mock_heartbeat:
            mock_heartbeat.return_value = AsyncMock()
            
            response = await sse_endpoints.sse_endpoint(
                self.mock_request, "file_change", "test-project", "last-event-123"
            )
            
            assert response.media_type == "text/event-stream"

    @pytest.mark.asyncio
    async def test_sse_subscribe_endpoint(self):
        """Test SSE subscribe endpoint"""
        self.mock_sse_manager.handle_subscription = AsyncMock(return_value=["file_change", "auto_commit"])
        
        subscription = sse_endpoints.SSESubscriptionRequest(
            event_types=["file_change", "auto_commit"],
            project_id="test-project"
        )
        
        response = await sse_endpoints.sse_subscribe(subscription, "test-conn-333")
        
        assert response["message"] == "SSE subscriptions updated successfully"
        assert response["connection_id"] == "test-conn-333"
        assert response["event_types"] == ["file_change", "auto_commit"]
