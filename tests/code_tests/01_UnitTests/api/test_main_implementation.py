"""
Comprehensive unit tests for autoprojectmanagement/api/main.py
Generated by AutoProjectManagement testing framework
"""

import pytest
from unittest.mock import Mock, patch
import sys
from pathlib import Path
from fastapi.testclient import TestClient
from fastapi import HTTPException
import importlib.util

# Add src directory to path for imports
src_path = Path(__file__).resolve().parent.parent.parent.parent.parent / "src"
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

# Import the module directly
spec = importlib.util.spec_from_file_location(
    "main", 
    str(src_path / "autoprojectmanagement" / "api" / "main.py")
)
main = importlib.util.module_from_spec(spec)
spec.loader.exec_module(main)

# Import the app
app = main.app

# Create a test client for the FastAPI app
client = TestClient(app)

class TestMain:
    """Test class for main module"""
    
    def setup_method(self):
        """Setup for each test method"""
        pass
    
    def teardown_method(self):
        """Cleanup after each test method"""
        pass

    def test_read_root_basic(self):
        """Test basic functionality of read_root"""
        response = client.get("/")
        assert response.status_code == 200
        assert response.json() == {
            "message": "Welcome to the AutoProjectManagement API",
            "version": "1.0.0",
            "api_version": "v1",
            "documentation": {
                "swagger": "/docs",
                "redoc": "/redoc",
                "openapi": "/openapi.json"
            },
            "endpoints": {
                "projects": "/api/v1/projects",
                "health": "/api/v1/health",
                "status": "/api/v1/projects/{project_id}/status"
            },
            "timestamp": response.json()["timestamp"]
        }

    def test_health_check(self):
        """Test health check endpoint"""
        response = client.get("/api/v1/health")
        assert response.status_code == 200
        assert response.json()["status"] == "healthy"

    def test_get_project_status_basic(self):
        """Test basic functionality of get_project_status"""
        # Mock the project service to return a sample status
        with patch('autoprojectmanagement.api.app.project_service.get_status') as mock_get_status:
            mock_get_status.return_value = {
                "project_id": "123",
                "total_tasks": 10,
                "completed_tasks": 5,
                "progress_percentage": 50.0,
                "summary": "In progress",
                "last_updated": "2025-08-14T12:00:00"
            }
            response = client.get("/api/v1/projects/123/status")
            assert response.status_code == 200
            assert response.json() == {
                "project_id": "123",
                "total_tasks": 10,
                "completed_tasks": 5,
                "progress_percentage": 50.0,
                "summary": "In progress",
                "last_updated": "2025-08-14T12:00:00"
            }

    def test_get_project_status_not_found(self):
        """Test project status not found"""
        with patch('autoprojectmanagement.api.app.project_service.get_status') as mock_get_status:
            mock_get_status.side_effect = HTTPException(status_code=404, detail="Project '999' not found")
            response = client.get("/api/v1/projects/999/status")
            assert response.status_code == 404
            assert response.json()["error"]["message"] == "Project '999' not found"

    def test_get_project_status_invalid_format(self):
        """Test invalid format requested"""
        response = client.get("/api/v1/projects/123/status?format=invalid")
        assert response.status_code == 400
        assert "Unsupported format" in response.json()["error"]["message"]

    def test_create_project(self):
        """Test creating a new project"""
        response = client.post("/api/v1/projects", json={
            "name": "New Project",
            "description": "A new project description",
            "template": "default"
        })
        assert response.status_code == 200
        assert response.json()["message"] == "Project created successfully"

    def test_update_project(self):
        """Test updating an existing project"""
        response = client.put("/api/v1/projects/123", json={
            "name": "Updated Project",
            "description": "Updated description"
        })
        assert response.status_code == 200
        assert response.json()["message"] == "Project 123 updated successfully"

    def test_delete_project(self):
        """Test deleting a project"""
        response = client.delete("/api/v1/projects/123")
        assert response.status_code == 200
        assert response.json()["message"] == "Project 123 deleted successfully"

    def test_create_project_invalid_data(self):
        """Test creating a project with invalid data"""
        response = client.post("/api/v1/projects", json={})
        assert response.status_code == 422  # Unprocessable Entity

    def test_update_project_not_found(self):
        """Test updating a non-existent project"""
        response = client.put("/api/v1/projects/999", json={
            "name": "Updated Project",
            "description": "Updated description"
        })
        assert response.status_code == 404
        assert response.json()["error"]["message"] == "Project '999' not found"

    def test_delete_project_not_found(self):
        """Test deleting a non-existent project"""
        response = client.delete("/api/v1/projects/999")
        assert response.status_code == 404
        assert response.json()["error"]["message"] == "Project '999' not found"

    def test_get_all_projects(self):
        """Test retrieving all projects"""
        response = client.get("/api/v1/projects")
        assert response.status_code == 200
        assert isinstance(response.json(), list)  # Expecting a list of projects

    def test_get_project_status_with_invalid_id(self):
        """Test getting project status with invalid ID"""
        response = client.get("/api/v1/projects/invalid_id/status")
        assert response.status_code == 400  # Bad Request

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
