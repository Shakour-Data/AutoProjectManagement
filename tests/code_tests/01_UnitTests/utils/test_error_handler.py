"""
Comprehensive unit tests for autoprojectmanagement/utils/error_handler.py
Generated by AutoProjectManagement testing framework
"""

import pytest
from autoprojectmanagement.utils.error_handler import (
    ErrorHandler, CustomError, ValidationError, AuthenticationError,
    AuthorizationError, DatabaseError, ErrorContext, ErrorSeverity, ErrorCategory
)

@pytest.fixture
def error_handler_instance():
    """Fixture for ErrorHandler instance."""
    return ErrorHandler()

@pytest.fixture
def sample_context():
    """Fixture for sample error context."""
    return ErrorContext(
        request_id="test_request_id",
        user_id="test_user_id",
        endpoint="/test/endpoint",
        method="GET",
        parameters={"param1": "value1"}
    )

class TestErrorHandlerFunctionality:
    """Test class for ErrorHandler functionality tests"""
    
    def test_handle_error_logs_error(self, error_handler_instance, sample_context):
        """Test that handle_error logs the error correctly."""
        error = CustomError("Test error", "TEST_ERROR")
        result = error_handler_instance.handle_error(error, sample_context)
        
        assert result["error"]["message"] == "Test error"
        assert result["error"]["code"] == "TEST_ERROR"
        assert len(error_handler_instance.error_log) == 1

    def test_handle_error_with_context(self, error_handler_instance, sample_context):
        """Test that handle_error includes context information."""
        error = CustomError("Test error with context", "TEST_ERROR")
        result = error_handler_instance.handle_error(error, sample_context)
        
        assert result["error"]["context"]["request_id"] == "test_request_id"
        assert result["error"]["context"]["user_id"] == "test_user_id"
        assert result["error"]["context"]["endpoint"] == "/test/endpoint"

    def test_create_validation_error(self):
        """Test creating a validation error."""
        error = ValidationError("Invalid input", field="username", value="")
        assert error.message == "Invalid input"
        assert error.code == "VALIDATION_ERROR"
        assert error.category == ErrorCategory.VALIDATION

    def test_create_authentication_error(self):
        """Test creating an authentication error."""
        error = AuthenticationError("Authentication failed")
        assert error.message == "Authentication failed"
        assert error.code == "AUTHENTICATION_ERROR"
        assert error.category == ErrorCategory.AUTHENTICATION

    def test_create_authorization_error(self):
        """Test creating an authorization error."""
        error = AuthorizationError("Authorization failed")
        assert error.message == "Authorization failed"
        assert error.code == "AUTHORIZATION_ERROR"
        assert error.category == ErrorCategory.AUTHORIZATION

    def test_create_database_error(self):
        """Test creating a database error."""
        error = DatabaseError("Database connection failed", operation="connect")
        assert error.message == "Database connection failed"
        assert error.code == "DATABASE_ERROR"
        assert error.category == ErrorCategory.DATABASE

class TestErrorHandlerEdgeCases:
    """Test class for ErrorHandler edge cases"""
    
    def test_handle_error_with_none_context(self, error_handler_instance):
        """Test handle_error with None context."""
        error = CustomError("Test error with no context", "TEST_ERROR")
        result = error_handler_instance.handle_error(error, None)
        
        assert result["error"]["message"] == "Test error with no context"
        assert result["error"]["context"] is None

    def test_handle_error_with_unexpected_exception(self, error_handler_instance):
        """Test handle_error with an unexpected exception."""
        with pytest.raises(TypeError):
            error_handler_instance.handle_error(TypeError("Unexpected error"), None)

class TestErrorHandlerIntegration:
    """Test class for ErrorHandler integration tests"""
    
    def test_error_handler_decorator(self, error_handler_instance):
        """Test error handler decorator functionality."""
        @error_handler_instance.error_handler_decorator
        def test_function():
            raise CustomError("Test error in function", "TEST_ERROR")
        
        result = test_function()
        assert result["error"]["message"] == "Test error in function"
        assert result["error"]["code"] == "TEST_ERROR"

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
