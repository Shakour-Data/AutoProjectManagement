"""
Comprehensive unit tests for autoprojectmanagement/utils/security.py
Generated by AutoProjectManagement testing framework
"""

import pytest
from datetime import datetime, timedelta
from autoprojectmanagement.utils.security import (
    PasswordHasher, TokenManager, SecurityUtils, SecurityConfig
)

class TestSecurityFunctionality:
    """Test class for Security functionality tests (5 tests)"""
    
    def test_password_hasher_hash_and_verify(self):
        """Test PasswordHasher hash and verify functionality."""
        password = "TestPassword123!"
        hashed = PasswordHasher.hash_password(password)
        assert hashed is not None
        assert hashed != password
        assert PasswordHasher.verify_password(password, hashed) is True
    
    def test_token_manager_create_and_verify_access_token(self):
        """Test TokenManager access token creation and verification."""
        data = {"user_id": "test_user", "email": "test@example.com"}
        token = TokenManager.create_access_token(data)
        assert token is not None
        assert isinstance(token, str)
        
        payload = TokenManager.verify_token(token)
        assert payload is not None
        assert payload["user_id"] == "test_user"
        assert payload["email"] == "test@example.com"
    
    def test_security_utils_sanitize_input(self):
        """Test SecurityUtils input sanitization."""
        input_string = "<script>alert('xss')</script>Hello World"
        sanitized = SecurityUtils.sanitize_input(input_string)
        assert "<script>" not in sanitized
        assert "Hello World" in sanitized
        assert sanitized == "Hello World"
    
    def test_security_utils_validate_email(self):
        """Test SecurityUtils email validation."""
        valid_email = "test@example.com"
        invalid_email = "invalid.email"
        
        assert SecurityUtils.validate_email(valid_email) is True
        assert SecurityUtils.validate_email(invalid_email) is False
    
    def test_password_hasher_generate_secure_password(self):
        """Test PasswordHasher secure password generation."""
        password = PasswordHasher.generate_secure_password(16)
        assert len(password) == 16
        assert any(c.isupper() for c in password)
        assert any(c.islower() for c in password)
        assert any(c.isdigit() for c in password)
        assert any(c in "!@#$%^&*()_-+=[]{}|;:,.<>?" for c in password)

class TestSecurityEdgeCases:
    """Test class for Security edge cases (5 tests)"""
    
    def test_password_hasher_empty_password(self):
        """Test PasswordHasher with empty password."""
        with pytest.raises(ValueError, match="Password cannot be empty"):
            PasswordHasher.hash_password("")
    
    def test_password_hasher_very_long_password(self):
        """Test PasswordHasher with very long password."""
        long_password = "a" * (SecurityConfig.PASSWORD_MAX_LENGTH + 1)
        with pytest.raises(ValueError, match="Password too long"):
            PasswordHasher.hash_password(long_password)
    
    def test_password_hasher_verify_with_invalid_hash(self):
        """Test PasswordHasher verify with invalid hash."""
        result = PasswordHasher.verify_password("password", "invalid_hash")
        assert result is False
    
    def test_token_manager_expired_token(self):
        """Test TokenManager with expired token."""
        data = {"user_id": "test_user"}
        # Create token that expires immediately
        token = TokenManager.create_access_token(
            data, expires_delta=timedelta(seconds=-1)
        )
        payload = TokenManager.verify_token(token)
        assert payload is None
    
    def test_security_utils_sanitize_empty_input(self):
        """Test SecurityUtils sanitize with empty input."""
        result = SecurityUtils.sanitize_input("")
        assert result == ""
        
        result = SecurityUtils.sanitize_input(None)
        assert result == ""

class TestSecurityErrorHandling:
    """Test class for Security error handling (5 tests)"""
    
    def test_password_hasher_invalid_verify_parameters(self):
        """Test PasswordHasher verify with invalid parameters."""
        result = PasswordHasher.verify_password(None, "hash")
        assert result is False
        
        result = PasswordHasher.verify_password("password", None)
        assert result is False
    
    def test_token_manager_invalid_token(self):
        """Test TokenManager with invalid token."""
        payload = TokenManager.verify_token("invalid.token.string")
        assert payload is None
    
    def test_token_manager_malformed_token(self):
        """Test TokenManager with malformed token."""
        payload = TokenManager.verify_token("malformed.token")
        assert payload is None
    
    def test_security_utils_validate_malformed_email(self):
        """Test SecurityUtils validate with malformed email."""
        # Email with multiple @ signs
        assert SecurityUtils.validate_email("test@@example.com") is False
        
        # Email with double dots
        assert SecurityUtils.validate_email("test..test@example.com") is False
    
    def test_password_hasher_unicode_password(self):
        """Test PasswordHasher with unicode password."""
        password = "TëstPässwörd123!"
        hashed = PasswordHasher.hash_password(password)
        assert PasswordHasher.verify_password(password, hashed) is True

class TestSecurityIntegration:
    """Test class for Security integration tests (5 tests)"""
    
    def test_password_strength_analysis(self):
        """Test PasswordHasher password strength analysis."""
        weak_password = "password"
        analysis = PasswordHasher.is_password_strong(weak_password)
        assert analysis["strength"] == "weak"
        assert len(analysis["suggestions"]) > 0
        
        strong_password = "Str0ng!P@ssw0rd123"
        analysis = PasswordHasher.is_password_strong(strong_password)
        assert analysis["strength"] == "strong"
        assert analysis["score"] >= 6
    
    def test_token_manager_refresh_token(self):
        """Test TokenManager refresh token functionality."""
        data = {"user_id": "test_user", "token_type": "refresh"}
        token = TokenManager.create_refresh_token(data)
        assert token is not None
        
        payload = TokenManager.verify_token(token)
        assert payload is not None
        assert payload["user_id"] == "test_user"
        assert payload["token_type"] == "refresh"
    
    def test_security_utils_generate_secure_random_string(self):
        """Test SecurityUtils secure random string generation."""
        string1 = SecurityUtils.generate_secure_random_string(32)
        string2 = SecurityUtils.generate_secure_random_string(32)
        
        assert len(string1) > 0
        assert len(string2) > 0
        assert string1 != string2  # Should be different
    
    def test_token_manager_csrf_and_api_key_generation(self):
        """Test TokenManager CSRF token and API key generation."""
        csrf_token = TokenManager.generate_csrf_token()
        api_key = TokenManager.generate_api_key()
        
        assert csrf_token is not None
        assert api_key is not None
        assert len(csrf_token) > 0
        assert len(api_key) > 0
        assert api_key.startswith("apk_")
    
    def test_complete_security_workflow(self):
        """Test complete security workflow integration."""
        # 1. Generate and hash password
        original_password = "MySecurePassword123!"
        hashed_password = PasswordHasher.hash_password(original_password)
        
        # 2. Verify password
        assert PasswordHasher.verify_password(original_password, hashed_password) is True
        
        # 3. Check password strength
        strength = PasswordHasher.is_password_strong(original_password)
        assert strength["strength"] == "strong"
        
        # 4. Create user data
        user_data = {
            "user_id": "user_123",
            "email": "user@example.com",
            "name": "Test User"
        }
        
        # 5. Create access token
        access_token = TokenManager.create_access_token(user_data)
        
        # 6. Verify token
        payload = TokenManager.verify_token(access_token)
        assert payload["user_id"] == "user_123"
        assert payload["email"] == "user@example.com"
        
        # 7. Sanitize user input
        user_input = "<script>alert('xss')</script>Hello World"
        sanitized_input = SecurityUtils.sanitize_input(user_input)
        assert "<script>" not in sanitized_input
        
        # 8. Validate email
        assert SecurityUtils.validate_email("user@example.com") is True
        
        # 9. Generate CSRF token
        csrf_token = TokenManager.generate_csrf_token()
        assert csrf_token is not None
        
        # 10. Generate API key
        api_key = TokenManager.generate_api_key()
        assert api_key.startswith("apk_")

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
