"""
Comprehensive unit tests for autoprojectmanagement/utils/error_handler.py
Generated by AutoProjectManagement testing framework
"""

import pytest
import logging
from unittest.mock import patch, MagicMock
from autoprojectmanagement.utils.error_handler import (
    ErrorHandler, CustomError, ValidationError, AuthenticationError,
    AuthorizationError, DatabaseError, ErrorContext, ErrorSeverity, ErrorCategory
)

@pytest.fixture
def error_handler_instance():
    """Fixture for ErrorHandler instance."""
    return ErrorHandler()

@pytest.fixture
def sample_context():
    """Fixture for sample error context."""
    return ErrorContext(
        request_id="test_request_id",
        user_id="test_user_id",
        endpoint="/test/endpoint",
        method="GET",
        parameters={"param1": "value1"}
    )

class TestErrorHandlerFunctionality:
    """Test class for ErrorHandler functionality tests (5 tests)"""
    
    def test_error_handler_initialization(self):
        """Test ErrorHandler initialization with default parameters."""
        handler = ErrorHandler()
        assert handler.log_errors is True
        assert handler.raise_errors is False
        assert handler.error_log == []
    
    def test_error_handler_initialization_custom_params(self):
        """Test ErrorHandler initialization with custom parameters."""
        handler = ErrorHandler(log_errors=False, raise_errors=True)
        assert handler.log_errors is False
        assert handler.raise_errors is True
    
    def test_custom_error_creation(self):
        """Test CustomError creation with all parameters."""
        context = ErrorContext(request_id="test123", user_id="user456")
        error = CustomError(
            message="Test error message",
            code="TEST_ERROR",
            severity=ErrorSeverity.WARNING,
            category=ErrorCategory.VALIDATION,
            details={"field": "test_field", "value": "invalid_value"},
            context=context
        )
        
        assert error.message == "Test error message"
        assert error.code == "TEST_ERROR"
        assert error.severity == ErrorSeverity.WARNING
        assert error.category == ErrorCategory.VALIDATION
        assert error.details == {"field": "test_field", "value": "invalid_value"}
        assert error.context.request_id == "test123"
    
    def test_error_context_to_dict(self):
        """Test ErrorContext conversion to dictionary."""
        context = ErrorContext(
            request_id="req123",
            user_id="user456",
            endpoint="/api/test",
            method="POST",
            parameters={"param1": "value1", "param2": "value2"}
        )
        
        context_dict = context.to_dict()
        assert context_dict["request_id"] == "req123"
        assert context_dict["user_id"] == "user456"
        assert context_dict["endpoint"] == "/api/test"
        assert context_dict["method"] == "POST"
        assert context_dict["parameters"] == {"param1": "value1", "param2": "value2"}
    
    def test_custom_error_to_dict(self):
        """Test CustomError conversion to dictionary."""
        error = CustomError(
            message="Test error",
            code="TEST_ERROR",
            severity=ErrorSeverity.ERROR,
            category=ErrorCategory.UNKNOWN
        )
        
        error_dict = error.to_dict()
        assert error_dict["error"]["code"] == "TEST_ERROR"
        assert error_dict["error"]["message"] == "Test error"
        assert error_dict["error"]["severity"] == "error"
        assert error_dict["error"]["category"] == "unknown"

class TestErrorHandlerEdgeCases:
    """Test class for ErrorHandler edge cases (5 tests)"""
    
    def test_error_context_with_none_parameters(self):
        """Test ErrorContext with None parameters."""
        context = ErrorContext(
            request_id=None,
            user_id=None,
            endpoint=None,
            method=None,
            parameters=None
        )
        
        context_dict = context.to_dict()
        assert context_dict["request_id"] is None
        assert context_dict["user_id"] is None
        assert context_dict["endpoint"] is None
        assert context_dict["method"] is None
        assert context_dict["parameters"] == {}
    
    def test_custom_error_with_empty_details(self):
        """Test CustomError with empty details."""
        error = CustomError(
            message="Test error",
            code="TEST_ERROR",
            details={}
        )
        
        error_dict = error.to_dict()
        assert error_dict["error"]["details"] == {}
    
    def test_error_handler_with_no_context(self, error_handler_instance):
        """Test ErrorHandler with no context provided."""
        error = CustomError("Test error", "TEST_ERROR")
        result = error_handler_instance.handle_error(error)
        
        assert result["error"]["message"] == "Test error"
        assert result["error"]["context"] is None
    
    def test_error_handler_with_empty_error_log(self, error_handler_instance):
        """Test ErrorHandler get_error_log with empty log."""
        log = error_handler_instance.get_error_log()
        assert log == []
    
    def test_error_handler_clear_empty_log(self, error_handler_instance):
        """Test ErrorHandler clear_error_log with empty log."""
        error_handler_instance.clear_error_log()
        assert error_handler_instance.error_log == []

class TestErrorHandlerErrorHandling:
    """Test class for ErrorHandler error handling (5 tests)"""
    
    def test_error_handler_with_validation_error(self, error_handler_instance):
        """Test ErrorHandler handling of ValidationError."""
        error = ValidationError("Invalid field value", field="email", value="invalid")
        result = error_handler_instance.handle_error(error)
        
        assert result["error"]["code"] == "VALIDATION_ERROR"
        assert result["error"]["category"] == "validation"
        assert result["error"]["details"]["field"] == "email"
    
    def test_error_handler_with_authentication_error(self, error_handler_instance):
        """Test ErrorHandler handling of AuthenticationError."""
        error = AuthenticationError("Invalid credentials")
        result = error_handler_instance.handle_error(error)
        
        assert result["error"]["code"] == "AUTHENTICATION_ERROR"
        assert result["error"]["category"] == "authentication"
    
    def test_error_handler_with_authorization_error(self, error_handler_instance):
        """Test ErrorHandler handling of AuthorizationError."""
        error = AuthorizationError("Access denied")
        result = error_handler_instance.handle_error(error)
        
        assert result["error"]["code"] == "AUTHORIZATION_ERROR"
        assert result["error"]["category"] == "authorization"
    
    def test_error_handler_with_database_error(self, error_handler_instance):
        """Test ErrorHandler handling of DatabaseError."""
        error = DatabaseError("Connection failed", operation="connect")
        result = error_handler_instance.handle_error(error)
        
        assert result["error"]["code"] == "DATABASE_ERROR"
        assert result["error"]["category"] == "database"
        assert result["error"]["details"]["operation"] == "connect"
    
    def test_error_handler_with_standard_exception(self, error_handler_instance):
        """Test ErrorHandler handling of standard Python exceptions."""
        try:
            raise ValueError("Test standard exception")
        except Exception as e:
            result = error_handler_instance.handle_error(e)
            
        assert "VALUEERROR" in result["error"]["code"]
        assert result["error"]["message"] == "Test standard exception"

class TestErrorHandlerIntegration:
    """Test class for ErrorHandler integration tests (5 tests)"""
    
    def test_error_handler_log_persistence(self, error_handler_instance):
        """Test that ErrorHandler persists errors in log."""
        error1 = CustomError("First error", "ERROR_1")
        error2 = CustomError("Second error", "ERROR_2")
        
        error_handler_instance.handle_error(error1)
        error_handler_instance.handle_error(error2)
        
        assert len(error_handler_instance.error_log) == 2
        assert error_handler_instance.error_log[0]["error"]["error"]["code"] == "ERROR_1"
        assert error_handler_instance.error_log[1]["error"]["error"]["code"] == "ERROR_2"
    
    def test_error_handler_get_filtered_log(self, error_handler_instance):
        """Test ErrorHandler get_error_log with filtering."""
        error1 = CustomError("Error 1", "ERROR_1", category=ErrorCategory.VALIDATION)
        error2 = CustomError("Error 2", "ERROR_2", category=ErrorCategory.DATABASE)
        
        error_handler_instance.handle_error(error1)
        error_handler_instance.handle_error(error2)
        
        # Filter by category
        validation_errors = error_handler_instance.get_error_log(category=ErrorCategory.VALIDATION)
        assert len(validation_errors) == 1
        assert validation_errors[0]["error"]["error"]["code"] == "ERROR_1"
    
    def test_error_handler_clear_log(self, error_handler_instance):
        """Test ErrorHandler clear_error_log functionality."""
        error = CustomError("Test error", "TEST_ERROR")
        error_handler_instance.handle_error(error)
        
        assert len(error_handler_instance.error_log) == 1
        
        error_handler_instance.clear_error_log()
        assert len(error_handler_instance.error_log) == 0
    
    def test_error_handler_decorator_integration(self):
        """Test error handler decorator integration."""
        handler = ErrorHandler()
        
        @handler.error_handler_decorator
        def failing_function():
            raise ValueError("Function failed")
        
        result = failing_function()
        assert result["error"]["message"] == "Function failed"
        assert "VALUEERROR" in result["error"]["code"]
    
    def test_error_handler_complete_workflow(self):
        """Test complete error handling workflow."""
        # Initialize handler
        handler = ErrorHandler()
        
        # Create context
        context = ErrorContext(
            request_id="workflow_test",
            user_id="test_user",
            endpoint="/api/workflow",
            method="POST"
        )
        
        # Create and handle various errors
        validation_error = ValidationError("Invalid input", field="email")
        auth_error = AuthenticationError("Invalid credentials")
        db_error = DatabaseError("Connection timeout", operation="connect")
        
        # Handle errors
        result1 = handler.handle_error(validation_error, context)
        result2 = handler.handle_error(auth_error, context)
        result3 = handler.handle_error(db_error, context)
        
        # Verify results
        assert result1["error"]["code"] == "VALIDATION_ERROR"
        assert result2["error"]["code"] == "AUTHENTICATION_ERROR"
        assert result3["error"]["code"] == "DATABASE_ERROR"
        
        # Check log
        assert len(handler.error_log) == 3
        
        # Filter log
        filtered_log = handler.get_error_log(category=ErrorCategory.VALIDATION)
        assert len(filtered_log) == 1
        
        # Clear log
        handler.clear_error_log()
        assert len(handler.error_log) == 0

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
