"""
Comprehensive unit tests for autoprojectmanagement/main_modules/task_workflow_management/do_important_tasks.py
Generated by AutoProjectManagement testing framework
"""

import pytest
import json
import os
import tempfile
from datetime import datetime, timedelta
from unittest.mock import patch, AsyncMock, MagicMock
from autoprojectmanagement.main_modules.task_workflow_management.do_important_tasks import (
    ImportantTask, TaskStatus, TaskCategory, ImportantTaskManager, 
    JsonTaskStorage, TaskPrioritizer, TaskScheduler
)

@pytest.fixture
def temp_dir():
    """Fixture for temporary directory."""
    with tempfile.TemporaryDirectory() as tmpdir:
        yield tmpdir

@pytest.fixture
def sample_task_data():
    """Fixture for sample task data."""
    return {
        'id': 'test_task_1',
        'title': 'Test Important Task',
        'description': 'This is a test important task',
        'priority': 2,
        'estimated_hours': 5.0,
        'strategic_value': 80.0,
        'dependencies': ['task_dep_1'],
        'deadline': (datetime.now() + timedelta(days=7)).isoformat(),
        'created_at': datetime.now().isoformat(),
        'updated_at': datetime.now().isoformat(),
        'status': 'pending',
        'category': 'strategic',
        'tags': ['test', 'important'],
        'notes': ['Test note 1'],
        'completion_percentage': 0.0
    }

class TestImportantTaskFunctionality:
    """Test class for ImportantTask functionality tests (5 tests)"""
    
    def test_important_task_creation(self):
        """Test ImportantTask creation with all parameters."""
        task = ImportantTask(
            id="task_1",
            title="Test Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=["dep_1", "dep_2"]
        )
        
        assert task.id == "task_1"
        assert task.title == "Test Task"
        assert task.priority == 1
        assert task.estimated_hours == 5.0
        assert task.strategic_value == 90.0
        assert task.dependencies == ["dep_1", "dep_2"]
        assert task.status == TaskStatus.PENDING
        assert task.category == TaskCategory.STRATEGIC
    
    def test_important_task_to_dict(self):
        """Test ImportantTask conversion to dictionary."""
        task = ImportantTask(
            id="task_1",
            title="Test Task",
            description="Test Description",
            priority=2,
            estimated_hours=3.5,
            strategic_value=75.0,
            dependencies=["dep_1"]
        )
        
        task_dict = task.to_dict()
        assert task_dict["id"] == "task_1"
        assert task_dict["title"] == "Test Task"
        assert task_dict["priority"] == 2
        assert task_dict["estimated_hours"] == 3.5
        assert task_dict["strategic_value"] == 75.0
        assert task_dict["dependencies"] == ["dep_1"]
    
    def test_important_task_from_dict(self):
        """Test ImportantTask creation from dictionary."""
        task_data = {
            'id': 'task_1',
            'title': 'Test Task',
            'description': 'Test Description',
            'priority': 3,
            'estimated_hours': 4.0,
            'strategic_value': 85.0,
            'dependencies': ['dep_1'],
            'deadline': None,
            'created_at': datetime.now().isoformat(),
            'updated_at': datetime.now().isoformat(),
            'status': 'pending',
            'category': 'strategic',
            'tags': [],
            'notes': [],
            'completion_percentage': 0.0
        }
        
        task = ImportantTask.from_dict(task_data)
        assert task.id == "task_1"
        assert task.title == "Test Task"
        assert task.priority == 3
        assert task.estimated_hours == 4.0
        assert task.strategic_value == 85.0
    
    def test_important_task_default_values(self):
        """Test ImportantTask default values."""
        task = ImportantTask(
            id="task_1",
            title="Test Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=[]
        )
        
        # Check that default values are set correctly
        assert task.status == TaskStatus.PENDING
        assert task.category == TaskCategory.STRATEGIC
        assert task.tags == []
        assert task.notes == []
        assert task.completion_percentage == 0.0
        assert task.created_at is not None
        assert task.updated_at is not None
    
    def test_important_task_post_init(self):
        """Test ImportantTask post-initialization."""
        task = ImportantTask(
            id="task_1",
            title="Test Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=[]
        )
        
        # Check that post-init correctly sets default values
        assert isinstance(task.created_at, datetime)
        assert isinstance(task.updated_at, datetime)
        assert task.tags == []
        assert task.notes == []

class TestImportantTaskEdgeCases:
    """Test class for ImportantTask edge cases (5 tests)"""
    
    def test_important_task_with_none_deadline(self):
        """Test ImportantTask with None deadline."""
        task = ImportantTask(
            id="task_1",
            title="Test Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=[]
        )
        
        task_dict = task.to_dict()
        assert task_dict["deadline"] is None
    
    def test_important_task_with_datetime_deadline(self):
        """Test ImportantTask with datetime deadline."""
        deadline = datetime.now() + timedelta(days=7)
        task = ImportantTask(
            id="task_1",
            title="Test Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=[],
            deadline=deadline
        )
        
        task_dict = task.to_dict()
        assert task_dict["deadline"] == deadline.isoformat()
    
    def test_important_task_from_dict_with_none_values(self):
        """Test ImportantTask from_dict with None values."""
        task_data = {
            'id': 'task_1',
            'title': 'Test Task',
            'description': 'Test Description',
            'priority': 1,
            'estimated_hours': 5.0,
            'strategic_value': 90.0,
            'dependencies': [],
            'deadline': None,
            'created_at': datetime.now().isoformat(),
            'updated_at': datetime.now().isoformat(),
            'status': 'pending',
            'category': 'strategic',
            'tags': None,
            'notes': None,
            'completion_percentage': 0.0
        }
        
        task = ImportantTask.from_dict(task_data)
        assert task.tags == []
        assert task.notes == []
    
    def test_important_task_priority_boundaries(self):
        """Test ImportantTask with priority boundary values."""
        # Test minimum priority
        task_min = ImportantTask(
            id="task_min",
            title="Min Priority Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=[]
        )
        assert task_min.priority == 1
        
        # Test maximum priority
        task_max = ImportantTask(
            id="task_max",
            title="Max Priority Task",
            description="Test Description",
            priority=5,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=[]
        )
        assert task_max.priority == 5
    
    def test_important_task_strategic_value_boundaries(self):
        """Test ImportantTask with strategic value boundary values."""
        # Test minimum strategic value
        task_min = ImportantTask(
            id="task_min",
            title="Min Strategic Value Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=0.0,
            dependencies=[]
        )
        assert task_min.strategic_value == 0.0
        
        # Test maximum strategic value
        task_max = ImportantTask(
            id="task_max",
            title="Max Strategic Value Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=100.0,
            dependencies=[]
        )
        assert task_max.strategic_value == 100.0

class TestImportantTaskErrorHandling:
    """Test class for ImportantTask error handling (5 tests)"""
    
    def test_important_task_invalid_priority(self):
        """Test ImportantTask with invalid priority values."""
        # This test is for the manager's validation, not the task itself
        # The task itself doesn't validate priority values
        pass
    
    def test_important_task_invalid_strategic_value(self):
        """Test ImportantTask with invalid strategic value."""
        # This test is for the manager's validation, not the task itself
        # The task itself doesn't validate strategic value
        pass
    
    def test_important_task_from_dict_invalid_data(self):
        """Test ImportantTask from_dict with invalid data."""
        invalid_task_data = {
            'id': 'task_1',
            'title': 'Test Task',
            # Missing required fields
        }
        
        # This should raise an error due to missing required fields
        try:
            task = ImportantTask.from_dict(invalid_task_data)
            # If we get here, it means the test failed
            assert False, "Should have raised an error"
        except Exception:
            # Expected behavior
            assert True
    
    def test_important_task_to_dict_datetime_conversion(self):
        """Test ImportantTask to_dict datetime conversion."""
        task = ImportantTask(
            id="task_1",
            title="Test Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=[]
        )
        
        task_dict = task.to_dict()
        # Check that datetime objects are converted to ISO format strings
        assert isinstance(task_dict["created_at"], str)
        assert isinstance(task_dict["updated_at"], str)
    
    def test_important_task_from_dict_invalid_datetime(self):
        """Test ImportantTask from_dict with invalid datetime format."""
        task_data = {
            'id': 'task_1',
            'title': 'Test Task',
            'description': 'Test Description',
            'priority': 1,
            'estimated_hours': 5.0,
            'strategic_value': 90.0,
            'dependencies': [],
            'deadline': 'invalid_datetime_format',
            'created_at': 'invalid_datetime_format',
            'updated_at': 'invalid_datetime_format',
            'status': 'pending',
            'category': 'strategic',
            'tags': [],
            'notes': [],
            'completion_percentage': 0.0
        }
        
        # This should raise an error due to invalid datetime format
        try:
            task = ImportantTask.from_dict(task_data)
            # If we get here, it means the test failed
            assert False, "Should have raised an error"
        except Exception:
            # Expected behavior
            assert True

class TestImportantTaskIntegration:
    """Test class for ImportantTask integration tests (5 tests)"""
    
    def test_important_task_full_lifecycle(self):
        """Test ImportantTask full lifecycle from creation to serialization."""
        # Create task
        task = ImportantTask(
            id="lifecycle_task",
            title="Lifecycle Test Task",
            description="Test Description",
            priority=2,
            estimated_hours=6.0,
            strategic_value=85.0,
            dependencies=["dep_1", "dep_2"],
            tags=["lifecycle", "test"],
            notes=["Initial note"]
        )
        
        # Convert to dict
        task_dict = task.to_dict()
        assert task_dict["id"] == "lifecycle_task"
        assert task_dict["title"] == "Lifecycle Test Task"
        assert task_dict["priority"] == 2
        assert task_dict["tags"] == ["lifecycle", "test"]
        assert task_dict["notes"] == ["Initial note"]
        
        # Create from dict
        recreated_task = ImportantTask.from_dict(task_dict)
        assert recreated_task.id == "lifecycle_task"
        assert recreated_task.title == "Lifecycle Test Task"
        assert recreated_task.priority == 2
        assert recreated_task.tags == ["lifecycle", "test"]
        assert recreated_task.notes == ["Initial note"]
    
    def test_important_task_status_updates(self):
        """Test ImportantTask status updates."""
        task = ImportantTask(
            id="status_task",
            title="Status Test Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=[]
        )
        
        # Check initial status
        assert task.status == TaskStatus.PENDING
        
        # Update status
        task.status = TaskStatus.IN_PROGRESS
        assert task.status == TaskStatus.IN_PROGRESS
        
        # Update to completed
        task.status = TaskStatus.COMPLETED
        assert task.status == TaskStatus.COMPLETED
    
    def test_important_task_category_updates(self):
        """Test ImportantTask category updates."""
        task = ImportantTask(
            id="category_task",
            title="Category Test Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=[]
        )
        
        # Check initial category
        assert task.category == TaskCategory.STRATEGIC
        
        # Update category
        task.category = TaskCategory.DEVELOPMENT
        assert task.category == TaskCategory.DEVELOPMENT
    
    def test_important_task_completion_percentage(self):
        """Test ImportantTask completion percentage updates."""
        task = ImportantTask(
            id="completion_task",
            title="Completion Test Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=[]
        )
        
        # Check initial completion percentage
        assert task.completion_percentage == 0.0
        
        # Update completion percentage
        task.completion_percentage = 50.0
        assert task.completion_percentage == 50.0
        
        # Update to 100%
        task.completion_percentage = 100.0
        assert task.completion_percentage == 100.0
    
    def test_important_task_timestamp_updates(self):
        """Test ImportantTask timestamp updates."""
        task = ImportantTask(
            id="timestamp_task",
            title="Timestamp Test Task",
            description="Test Description",
            priority=1,
            estimated_hours=5.0,
            strategic_value=90.0,
            dependencies=[]
        )
        
        # Store initial timestamps
        initial_created = task.created_at
        initial_updated = task.updated_at
        
        # Update task (this should update the updated_at timestamp)
        task.title = "Updated Title"
        task.updated_at = datetime.now()
        
        # Check that created_at remains the same but updated_at has changed
        assert task.created_at == initial_created
        assert task.updated_at >= initial_updated

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
