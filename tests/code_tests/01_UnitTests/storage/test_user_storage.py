"""
Comprehensive unit tests for autoprojectmanagement/storage/user_storage.py
Generated by AutoProjectManagement testing framework
"""

import pytest
import sys
import os
import json
import tempfile
from pathlib import Path
from unittest.mock import Mock, patch, MagicMock
from datetime import datetime, timedelta

# Add source to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent.parent / "src"))

from autoprojectmanagement.storage.user_storage import JSONUserStorage
from autoprojectmanagement.models.user import (
    UserProfile, UserSession, PasswordResetToken, 
    EmailVerificationToken, user_storage
)

@pytest.fixture
def temp_storage_dir():
    """Fixture for temporary storage directory."""
    # Create a temporary directory that persists for the test
    temp_dir = tempfile.mkdtemp()
    yield temp_dir
    # Cleanup after test
    import shutil
    try:
        shutil.rmtree(temp_dir)
    except:
        pass

@pytest.fixture
def user_storage_instance(temp_storage_dir):
    """Fixture for JSONUserStorage instance with temporary storage."""
    return JSONUserStorage(temp_storage_dir)

@pytest.fixture
def sample_user_profile():
    """Fixture for sample user profile."""
    return UserProfile(
        user_id="test_user_id",
        email="test@example.com",
        first_name="Test",
        last_name="User",
        is_verified=True,
        is_active=True,
        created_at=datetime.now(),
        last_login=datetime.now()
    )

@pytest.fixture
def sample_user_session():
    """Fixture for sample user session."""
    return UserSession(
        session_id="test_session_id",
        user_id="test_user_id",
        token="test_jwt_token",
        created_at=datetime.now(),
        expires_at=datetime.now() + timedelta(hours=1),
        user_agent="test_agent",
        ip_address="127.0.0.1"
    )

class TestUserStorageFunctionality:
    """Test class for JSONUserStorage functionality tests"""
    
    def test_user_storage_initialization_defaults(self, temp_storage_dir):
        """Test JSONUserStorage initialization with default parameters."""
        storage = JSONUserStorage(temp_storage_dir)
        
        assert storage.storage_dir == Path(temp_storage_dir)
        assert storage.users_file == Path(temp_storage_dir) / "users.json"
        assert storage.sessions_file == Path(temp_storage_dir) / "sessions.json"
        assert storage.reset_tokens_file == Path(temp_storage_dir) / "reset_tokens.json"
        assert storage.verification_tokens_file == Path(temp_storage_dir) / "verification_tokens.json"
    
    def test_user_storage_initialization_creates_files(self, temp_storage_dir):
        """Test that JSONUserStorage creates required files on initialization."""
        storage = JSONUserStorage(temp_storage_dir)
        
        assert storage.users_file.exists()
        assert storage.sessions_file.exists()
        assert storage.reset_tokens_file.exists()
        assert storage.verification_tokens_file.exists()
        
        # Check that files contain empty JSON objects
        with open(storage.users_file, 'r') as f:
            users_data = json.load(f)
            assert users_data == {}
        
        with open(storage.sessions_file, 'r') as f:
            sessions_data = json.load(f)
            assert sessions_data == {}
        
        with open(storage.reset_tokens_file, 'r') as f:
            reset_tokens_data = json.load(f)
            assert reset_tokens_data == {}
        
        with open(storage.verification_tokens_file, 'r') as f:
            verification_tokens_data = json.load(f)
            assert verification_tokens_data == {}
    
    def test_user_storage_save_and_load_data(self, user_storage_instance, sample_user_profile):
        """Test saving and loading user data."""
        # Add sample data to storage
        user_storage.users["test_user_id"] = sample_user_profile
        
        # Save data
        user_storage_instance.save_data()
        
        # Clear in-memory data
        user_storage.users.clear()
        
        # Load data
        user_storage_instance.load_data()
        
        # Verify data was loaded correctly
        assert "test_user_id" in user_storage.users
        assert user_storage.users["test_user_id"].email == "test@example.com"
        assert user_storage.users["test_user_id"].first_name == "Test"
        assert user_storage.users["test_user_id"].last_name == "User"
    
    def test_user_storage_get_storage_stats(self, user_storage_instance, sample_user_profile, sample_user_session):
        """Test getting storage statistics."""
        # Add sample data
        user_storage.users["test_user_id"] = sample_user_profile
        user_storage.sessions["test_session_id"] = sample_user_session
        
        # Get stats
        stats = user_storage_instance.get_storage_stats()
        
        assert stats["total_users"] == 1
        assert stats["total_sessions"] == 1
        assert stats["total_reset_tokens"] == 0
        assert stats["total_verification_tokens"] == 0
        assert stats["storage_directory"] == str(user_storage_instance.storage_dir)
        assert "last_cleanup" in stats
    
    def test_user_storage_export_data(self, user_storage_instance, sample_user_profile):
        """Test exporting user data."""
        # Add sample data
        user_storage.users["test_user_id"] = sample_user_profile
        
        # Export data
        export_file = user_storage_instance.export_data("json")
        
        assert export_file is not None
        assert export_file.endswith(".json")
        assert "user_data_export" in export_file
        
        # Verify exported data
        with open(export_file, 'r') as f:
            export_data = json.load(f)
            assert "users" in export_data
            assert "sessions" in export_data
            assert "reset_tokens" in export_data
            assert "verification_tokens" in export_data
            assert "export_timestamp" in export_data

class TestUserStorageEdgeCases:
    """Test class for JSONUserStorage edge cases"""
    
    def test_user_storage_with_special_directory_names(self):
        """Test JSONUserStorage with special directory names."""
        special_dirs = [
            "user_data_test_123",
            "user data with spaces",
            "user-data-with-dashes",
            "user_data_αβγ"  # Unicode characters
        ]
        
        for dir_name in special_dirs:
            with tempfile.TemporaryDirectory() as temp_dir:
                storage_dir = os.path.join(temp_dir, dir_name)
                storage = JSONUserStorage(storage_dir)
                assert storage.storage_dir.exists()
    
    def test_user_storage_with_empty_directory(self):
        """Test JSONUserStorage with empty storage directory."""
        with tempfile.TemporaryDirectory() as temp_dir:
            storage = JSONUserStorage(temp_dir)
            
            # Check that all required files exist
            assert storage.users_file.exists()
            assert storage.sessions_file.exists()
            assert storage.reset_tokens_file.exists()
            assert storage.verification_tokens_file.exists()
            
            # Check that stats are correct for empty storage
            stats = storage.get_storage_stats()
            assert stats["total_users"] == 0
            assert stats["total_sessions"] == 0
            assert stats["total_reset_tokens"] == 0
            assert stats["total_verification_tokens"] == 0
    
    def test_user_storage_with_malformed_json_files(self, temp_storage_dir):
        """Test JSONUserStorage handling of malformed JSON files."""
        # Create malformed JSON files
        with open(os.path.join(temp_storage_dir, "users.json"), 'w') as f:
            f.write("{ invalid json }")
        
        with open(os.path.join(temp_storage_dir, "sessions.json"), 'w') as f:
            f.write("{ invalid json }")
        
        # Storage should handle this gracefully
        storage = JSONUserStorage(temp_storage_dir)
        
        # Should have empty storage after error
        assert len(user_storage.users) == 0
        assert len(user_storage.sessions) == 0
    
    def test_user_storage_with_large_data_sets(self, user_storage_instance):
        """Test JSONUserStorage with large data sets."""
        # Create large number of users
        large_user_count = 100
        for i in range(large_user_count):
            user = UserProfile(
                user_id=f"user_{i}",
                email=f"user{i}@example.com",
                first_name=f"User{i}",
                last_name="Test",
                is_verified=True,
                is_active=True,
                created_at=datetime.now()
            )
            user_storage.users[f"user_{i}"] = user
        
        # Save and reload
        user_storage_instance.save_data()
        user_storage.users.clear()
        user_storage_instance.load_data()
        
        # Verify all users were saved and loaded
        assert len(user_storage.users) == large_user_count
    
    def test_user_storage_export_unsupported_format(self, user_storage_instance):
        """Test JSONUserStorage export with unsupported format."""
        result = user_storage_instance.export_data("xml")
        assert result is None

class TestUserStorageErrorHandling:
    """Test class for JSONUserStorage error handling"""
    
    @patch('autoprojectmanagement.storage.user_storage.json.dump')
    def test_user_storage_save_data_file_permission_error(self, mock_json_dump, user_storage_instance):
        """Test JSONUserStorage handling of file permission errors during save."""
        mock_json_dump.side_effect = PermissionError("Permission denied")
        
        # Add some data to storage
        user = UserProfile(
            user_id="test_user_id",
            email="test@example.com",
            first_name="Test",
            last_name="User",
            is_verified=True,
            is_active=True,
            created_at=datetime.now()
        )
        user_storage.users["test_user_id"] = user
        
        # Save should raise exception
        with pytest.raises(PermissionError):
            user_storage_instance.save_data()
    
    @patch('autoprojectmanagement.storage.user_storage.json.load')
    def test_user_storage_load_data_file_permission_error(self, mock_json_load, temp_storage_dir):
        """Test JSONUserStorage handling of file permission errors during load."""
        mock_json_load.side_effect = PermissionError("Permission denied")
        
        # Storage should handle this gracefully
        storage = JSONUserStorage(temp_storage_dir)
        
        # Should have empty storage after error
        assert len(user_storage.users) == 0
        assert len(user_storage.sessions) == 0
        assert len(user_storage.reset_tokens) == 0
        assert len(user_storage.verification_tokens) == 0
    
    @patch('autoprojectmanagement.storage.user_storage.Path.mkdir')
    def test_user_storage_initialization_directory_creation_error(self, mock_mkdir, temp_storage_dir):
        """Test JSONUserStorage handling of directory creation errors."""
        mock_mkdir.side_effect = PermissionError("Permission denied")
        
        # Should raise exception
        with pytest.raises(PermissionError):
            JSONUserStorage(temp_storage_dir)
    
    def test_user_storage_backup_nonexistent_directory(self, user_storage_instance):
        """Test JSONUserStorage backup with nonexistent backup directory."""
        # Try to backup to a directory that can't be created
        result = user_storage_instance.backup_data("/invalid/path/that/cannot/be/created")
        assert result is None
    
    def test_user_storage_restore_nonexistent_backup(self, user_storage_instance):
        """Test JSONUserStorage restore with nonexistent backup."""
        result = user_storage_instance.restore_backup("/nonexistent/backup/path")
        assert result is False

class TestUserStorageIntegration:
    """Test class for JSONUserStorage integration tests"""
    
    def test_user_storage_integration_with_user_models(self, user_storage_instance):
        """Test integration between JSONUserStorage and user models."""
        # Create user profile
        user = UserProfile(
            user_id="integration_test_user",
            email="integration@example.com",
            first_name="Integration",
            last_name="Test",
            is_verified=True,
            is_active=True,
            created_at=datetime.now()
        )
        
        # Store user
        user_storage.users[user.user_id] = user
        user_storage_instance.save_data()
        
        # Clear and reload
        user_storage.users.clear()
        user_storage_instance.load_data()
        
        # Verify user was correctly stored and retrieved
        assert user.user_id in user_storage.users
        loaded_user = user_storage.users[user.user_id]
        assert loaded_user.email == user.email
        assert loaded_user.first_name == user.first_name
        assert loaded_user.last_name == user.last_name
        assert loaded_user.is_verified == user.is_verified
        assert loaded_user.is_active == user.is_active
    
    def test_user_storage_integration_with_session_models(self, user_storage_instance):
        """Test integration between JSONUserStorage and session models."""
        # Create user session
        session = UserSession(
            session_id="integration_test_session",
            user_id="integration_test_user",
            token="integration_test_token",
            created_at=datetime.now(),
            expires_at=datetime.now() + timedelta(hours=1),
            user_agent="integration_test_agent",
            ip_address="192.168.1.1"
        )
        
        # Store session
        user_storage.sessions[session.session_id] = session
        user_storage_instance.save_data()
        
        # Clear and reload
        user_storage.sessions.clear()
        user_storage_instance.load_data()
        
        # Verify session was correctly stored and retrieved
        assert session.session_id in user_storage.sessions
        loaded_session = user_storage.sessions[session.session_id]
        assert loaded_session.user_id == session.user_id
        assert loaded_session.token == session.token
        assert loaded_session.user_agent == session.user_agent
        assert loaded_session.ip_address == session.ip_address
    
    def test_user_storage_integration_with_token_models(self, user_storage_instance):
        """Test integration between JSONUserStorage and token models."""
        # Create reset token
        reset_token = PasswordResetToken(
            token="integration_test_reset_token",
            user_id="integration_test_user",
            email="integration@example.com",
            created_at=datetime.now(),
            expires_at=datetime.now() + timedelta(minutes=30),
            used=False
        )
        
        # Store reset token
        user_storage.reset_tokens[reset_token.token] = reset_token
        user_storage_instance.save_data()
        
        # Clear and reload
        user_storage.reset_tokens.clear()
        user_storage_instance.load_data()
        
        # Verify reset token was correctly stored and retrieved
        assert reset_token.token in user_storage.reset_tokens
        loaded_reset_token = user_storage.reset_tokens[reset_token.token]
        assert loaded_reset_token.user_id == reset_token.user_id
        assert loaded_reset_token.email == reset_token.email
        assert loaded_reset_token.used == reset_token.used
    
    def test_user_storage_integration_with_verification_token_models(self, user_storage_instance):
        """Test integration between JSONUserStorage and verification token models."""
        # Create verification token
        verification_token = EmailVerificationToken(
            token="integration_test_verification_token",
            user_id="integration_test_user",
            email="integration@example.com",
            created_at=datetime.now(),
            expires_at=datetime.now() + timedelta(minutes=30)
        )
        
        # Store verification token
        user_storage.verification_tokens[verification_token.token] = verification_token
        user_storage_instance.save_data()
        
        # Clear and reload
        user_storage.verification_tokens.clear()
        user_storage_instance.load_data()
        
        # Verify verification token was correctly stored and retrieved
        assert verification_token.token in user_storage.verification_tokens
        loaded_verification_token = user_storage.verification_tokens[verification_token.token]
        assert loaded_verification_token.user_id == verification_token.user_id
        assert loaded_verification_token.email == verification_token.email
    
    def test_user_storage_complete_lifecycle_integration(self, temp_storage_dir):
        """Test complete lifecycle integration of JSONUserStorage."""
        # Initialize storage
        storage = JSONUserStorage(temp_storage_dir)
        
        # Create and store user data
        user = UserProfile(
            user_id="lifecycle_test_user",
            email="lifecycle@example.com",
            first_name="Lifecycle",
            last_name="Test",
            is_verified=True,
            is_active=True,
            created_at=datetime.now()
        )
        
        session = UserSession(
            session_id="lifecycle_test_session",
            user_id="lifecycle_test_user",
            token="lifecycle_test_token",
            created_at=datetime.now(),
            expires_at=datetime.now() + timedelta(hours=1)
        )
        
        reset_token = PasswordResetToken(
            token="lifecycle_test_reset_token",
            user_id="lifecycle_test_user",
            email="lifecycle@example.com",
            created_at=datetime.now(),
            expires_at=datetime.now() + timedelta(minutes=30),
            used=False
        )
        
        verification_token = EmailVerificationToken(
            token="lifecycle_test_verification_token",
            user_id="lifecycle_test_user",
            email="lifecycle@example.com",
            created_at=datetime.now(),
            expires_at=datetime.now() + timedelta(minutes=30)
        )
        
        # Store all data
        user_storage.users[user.user_id] = user
        user_storage.sessions[session.session_id] = session
        user_storage.reset_tokens[reset_token.token] = reset_token
        user_storage.verification_tokens[verification_token.token] = verification_token
        
        # Save data
        storage.save_data()
        
        # Clear in-memory data
        user_storage.users.clear()
        user_storage.sessions.clear()
        user_storage.reset_tokens.clear()
        user_storage.verification_tokens.clear()
        
        # Load data
        storage.load_data()
        
        # Verify all data was correctly stored and retrieved
        assert user.user_id in user_storage.users
        assert session.session_id in user_storage.sessions
        assert reset_token.token in user_storage.reset_tokens
        assert verification_token.token in user_storage.verification_tokens
        
        # Get stats
        stats = storage.get_storage_stats()
        assert stats["total_users"] == 1
        assert stats["total_sessions"] == 1
        assert stats["total_reset_tokens"] == 1
        assert stats["total_verification_tokens"] == 1
        
        # Export data
        export_file = storage.export_data("json")
        assert export_file is not None

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
