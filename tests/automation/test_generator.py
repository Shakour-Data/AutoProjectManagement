#!/usr/bin/env python3
"""
AutoProjectManagement - Automated Test Generator
Automatically generates tests for all modules and services
"""

import os
import ast
import inspect
import importlib
from pathlib import Path
from typing import List, Dict, Any
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AutoTestGenerator:
    """Automatically generates test files for Python modules"""
    
    def __init__(self, source_root: str = "autoprojectmanagement", test_root: str = "tests"):
        self.source_root = Path(source_root)
        self.test_root = Path(test_root)
        self.test_templates = {
            'function': self._function_test_template,
            'class': self._class_test_template,
            'module': self._module_test_template
        }
    
    def scan_modules(self) -> List[Path]:
        """Scan all Python modules in source directory"""
        modules = []
        for py_file in self.source_root.rglob("*.py"):
            if not py_file.name.startswith("_") and py_file.name != "__init__.py":
                modules.append(py_file)
        return modules
    
    def generate_all_tests(self):
        """Generate tests for all discovered modules"""
        modules = self.scan_modules()
        logger.info(f"Found {len(modules)} modules to generate tests for")
        
        for module_path in modules:
            self.generate_module_tests(module_path)
    
    def generate_module_tests(self, module_path: Path):
        """Generate tests for a specific module"""
        try:
            # Parse module AST
            with open(module_path, 'r', encoding='utf-8') as f:
                tree = ast.parse(f.read())
            
            # Create test directory structure
            relative_path = module_path.relative_to(self.source_root)
            test_dir = self.test_root / "code_tests" / "01_UnitTests" / relative_path.parent
            test_dir.mkdir(parents=True, exist_ok=True)
            
            test_file = test_dir / f"test_{module_path.stem}.py"
            
            # Generate test content
            test_content = self._generate_test_content(module_path, tree)
            
            with open(test_file, 'w', encoding='utf-8') as f:
                f.write(test_content)
            
            logger.info(f"Generated tests for {module_path} -> {test_file}")
            
        except Exception as e:
            logger.error(f"Failed to generate tests for {module_path}: {e}")
    
    def _generate_test_content(self, module_path: Path, tree: ast.AST) -> str:
        """Generate complete test file content"""
        module_name = module_path.stem
        imports = self._extract_imports(tree)
        classes = self._extract_classes(tree)
        functions = self._extract_functions(tree)
        
        content = f'''"""
Auto-generated tests for {module_path}
Generated by AutoProjectManagement testing framework
"""

import pytest
from unittest.mock import Mock, patch
import sys
from pathlib import Path

# Add source to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

from autoprojectmanagement{str(module_path.parent).replace(str(self.source_root), "").replace("/", ".")} import {module_name}

class Test{module_name.capitalize()}:
    """Test class for {module_name} module"""
    
    def setup_method(self):
        """Setup for each test method"""
        pass
    
    def teardown_method(self):
        """Cleanup after each test method"""
        pass
'''
        
        # Add function tests
        for func_name in functions:
            content += self._function_test_template(func_name)
        
        # Add class tests
        for class_name in classes:
            content += self._class_test_template(class_name)
        
        return content
    
    def _extract_imports(self, tree: ast.AST) -> List[str]:
        """Extract import statements from AST"""
        imports = []
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    imports.append(alias.name)
            elif isinstance(node, ast.ImportFrom):
                if node.module:
                    imports.append(node.module)
        return imports
    
    def _extract_classes(self, tree: ast.AST) -> List[str]:
        """Extract class names from AST"""
        classes = []
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef):
                classes.append(node.name)
        return classes
    
    def _extract_functions(self, tree: ast.AST) -> List[str]:
        """Extract function names from AST"""
        functions = []
        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef) and not node.name.startswith("_"):
                functions.append(node.name)
        return functions
    
    def _function_test_template(self, func_name: str) -> str:
        """Template for function tests"""
        return f'''
    def test_{func_name}_basic(self):
        """Test basic functionality of {func_name}"""
        # TODO: Implement basic test
        assert True
    
    def test_{func_name}_edge_cases(self):
        """Test edge cases for {func_name}"""
        # TODO: Implement edge case tests
        assert True
    
    def test_{func_name}_error_handling(self):
        """Test error handling in {func_name}"""
        # TODO: Implement error handling tests
        assert True
'''
    
    def _class_test_template(self, class_name: str) -> str:
        """Template for class tests"""
        return f'''
class Test{class_name}:
    """Test class for {class_name}"""
    
    def test_{class_name.lower()}_initialization(self):
        """Test {class_name} initialization"""
        # TODO: Implement initialization test
        assert True
    
    def test_{class_name.lower()}_methods(self):
        """Test {class_name} methods"""
        # TODO: Implement method tests
        assert True
'''
    
    def _module_test_template(self, module_name: str) -> str:
        """Template for module-level tests"""
        return f'''
def test_{module_name}_module_import():
    """Test module can be imported"""
    try:
        import autoprojectmanagement.{module_name}
        assert True
    except ImportError:
        assert False

def test_{module_name}_version():
    """Test module has version info"""
    # TODO: Check if module has __version__
    assert True
'''

if __name__ == "__main__":
    generator = AutoTestGenerator()
    generator.generate_all_tests()
